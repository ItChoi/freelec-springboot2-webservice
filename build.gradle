buildscript {
    // ext는 build.gradle에서 사용하는 전역변수 설정
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        // 스프링 부트 그레이들  플러그인의 2.1.7.RELEASE를 의존성으로 받겠다
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 앞서 선언한 플러그인 의존성들을 적용할 것인지 결정하는 코드
// 자바와 스프링 부트를 사용하기 위한 필수 플러그인 (항상 추가 필요)
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
// 스프링 부트의 의존성을 관리해주는 플러그인
apply plugin: 'io.spring.dependency-management'

group 'com.jojoldu.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

// 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을 지 지정한다.
// 기본적으로 mavenCentral 많이 사용 - 본인이 만든 라이브러리 업로드 하기 위해 많은 과정과 설정이 필요
// 최근에는 jcenter도 많이 사용 - 라이브러리 업로드를 간단하게 사용 가능, 라이브러리 업로드 시 mavenCentral에도 업로드 되도록 자동화 가능
repositories {
    mavenCentral()
}

// 프로젝트 개발에 필요한 의존성 선언
dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    // 롬복 사용을 위한 compile 코드 추가 후 Gradle 탭에서 새로고침 눌러주기.
    compile('org.projectlombok:lombok')
    // 스프링 부트용 Spring Data JPA 추상화 라이브러리, 스프링 부트 버전에 맞춰 자동으로 JPA 관련 라이브러리 버전을 관리해준다.
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    // 인메모리 관계형 데이터베이스, 별도의 설치 필요 없이 의존성만으로 관리 가능, 메모리 실행이기 때문에 재시작 시 초기화 된다. 이를 이용하여 테스트 용도로 많이 사용
    compile('com.h2database:h2')
    // 머스테치 스타터
    compile('org.springframework.boot:spring-boot-starter-mustache')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    // 스프링 시큐리티 관련 의존성, 소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성
    compile("org.springframework.boot:spring-boot-starter-oauth2-client")
    // 세션 저장소로 데이터베이스를 사용하기 위한 의존성
    compile('org.springframework.session:spring-session-jdbc')
    // 스프링 시큐리티 테스트를 위한 여러 도구를 지원하는 spring-security-test
    testCompile("org.springframework.security:spring-security-test")
}
